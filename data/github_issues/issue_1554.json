{
    "id": 2801980952,
    "number": 1554,
    "title": "[Feat]: grab the meeting's closed captions (Live Captions) when leaving the call",
    "body": "### Describe the feature\n\nGrab and save the meeting transcription into a JSON or Markdown file\n\n### Motivation\n\nThe current MS transcriptions are rarely useful, since they're only accessible to the meeting organiser.\n\nI'd like to save every meeting's transcription (for every meeting I join) in a file for my local notes.\n\nI've created a script (well, adapted it from https://github.com/akaihola/teams-transcript-scraper/blob/master/scraper.js) that grabs them, the only pointer I need is - how do I hook it up into the \"on call leave\" event?\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\nThe JS (to be pasted into the dev console):\n\n```\nasync function extractTranscription() {\n    // Get the meeting title\n    const meetingTitle = document.querySelector('h2[data-tid=\"chat-title\"] span')?.textContent.trim() || 'Teams Meeting';\n    const content = document.querySelector('[data-tid=\"closed-caption-v2-virtual-list-content\"]');\n    if (!content) {\n        console.log('content element not found');\n        return;\n    }\n\n    const chatItems = content.querySelectorAll('[data-tid=\"closed-caption-chat-message\"]');\n\n    let listContent = \"\";\n    chatItems.forEach(chatItem => {\n        const header = chatItem.querySelector('.ui-chat__message__author').textContent;\n        const message = chatItem.querySelector('[data-tid=\"closed-caption-text\"]').textContent;\n\n        listContent += `${header}: ${message}\\n`;\n    })\n\n    return { content: listContent, title: meetingTitle };\n}\n\nfunction downloadMarkdown(content, filename) {\n    const blob = new Blob([content], { type: 'text/markdown' });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n    URL.revokeObjectURL(link.href);\n}\n\nconst { content, title } = await extractTranscription();\nconsole.log(content);  // Still log the content to the console\n\n// Download the content as a Markdown file\nconst safeTitle = title.replace(/[<>:\"/\\\\|?*\\x00-\\x1F]/g, '').replace(/^\\.+/, '').replace(/\\.+$/, '').trim();\nconst maxLength = 251; // 255 - 4 characters for '.md'\nconst safeTitleLimited = safeTitle.slice(0, maxLength);\ndownloadMarkdown(content, `${safeTitleLimited || 'Teams_Meeting'}.md`);\n```",
    "state": "closed",
    "created_at": "2025-01-21T14:15:58+00:00",
    "updated_at": "2025-02-27T09:35:42+00:00",
    "closed_at": "2025-02-27T09:35:41+00:00",
    "user": "utrack",
    "assignee": "IsmaelMartinez",
    "labels": [
        "enhancement",
        "Stale"
    ],
    "comments_count": 8,
    "html_url": "https://github.com/IsmaelMartinez/teams-for-linux/issues/1554",
    "is_pull_request": false
}